@page "/login"
@inject HttpClient Http
@using Shared.Models

<h3>Kirjaudu sisään</h3>

<div>
    <label>Sähköposti:</label>
    <input @bind="Email" />
</div>
<div>
    <label>Salasana:</label>
    <input type="password" @bind="Password" />
</div>
<div>
    <button @onclick="LoginUser">Kirjaudu</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p> <!-- Näyttää viestin onnistuneesta tai epäonnistuneesta kirjautumisesta -->
}

@if (User != null)
{
    <h4>Tervetuloa, @User.FirstName @User.LastName!</h4> <!-- Näyttää käyttäjän koko nimen -->
}

@code {
    private string Email { get; set; } = string.Empty; // Sähköpostiosoite
    private string Password { get; set; } = string.Empty; // Salasana
    private string Message { get; set; } = string.Empty; // Viesti käyttäjälle kirjautumisen tuloksesta
    private UserModel? User { get; set; } // Tallennetaan kirjautuneen käyttäjän tiedot

    // Metodi, joka lähettää kirjautumistiedot backendille ja hakee käyttäjän tiedot
    private async Task LoginUser()
    {
        var userCredentials = new UserModel { Email = Email, PasswordHash = Password };

        try
        {
            // Lähetetään kirjautumistiedot backendille
            var response = await Http.PostAsJsonAsync("/api/auth/login", userCredentials);
            if (response.IsSuccessStatusCode)
            {
                User = await response.Content.ReadFromJsonAsync<UserModel>(); // Tallennetaan käyttäjän tiedot
                Message = $"Kirjautuminen onnistui!"; // Viesti onnistuneesta kirjautumisesta
            }
            else
            {
                Message = "Kirjautuminen epäonnistui. Tarkista sähköposti ja salasana.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Virhe kirjautuessa: {ex.Message}"; // Virheviesti, jos pyyntö epäonnistuu
        }
    }
}
